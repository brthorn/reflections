What happens when you initialize a repository? Why do you need to do it?

	What happens is it creates a .git folder which makes it possible to commit files.
	
How is the staging area different from the working directory and the repository? 
What value do you think it offers?	

	Staging area allows the user to add specific things to be committed, while the working directory 
	has the files and their commits. It allows the user to make logical commits and see changes.
	
How can you use the staging area to make sure you have one commit per logical change?
		
	While in the staging area, the user can see if the changes being made are logical, and if so continue with
	the commit
		
What are some situations when branches would be helpful in keeping your history organized? How would branches help?		
	
	Branches would be helpful when you want to make a different version of the code or game, but still keep the original
	game.

How do the diagrams help you visualize the branch structure?
		
	Diagrams help by showing visually where branches are, that way it is easier to know what updates will be in the 
	branch or not.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

		git merge <branch name 1> <branch name 2>, we represent them in a diagram so we can see the final commits
		that are being merged, so we will know all the commits that come with it.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
			
		The pros are it's much faster and more convenient so the programmer doesn't have to look through all changes
		made manually, but can lead to some unintended code being merged, while manually merging will be correct,
		but take longer.